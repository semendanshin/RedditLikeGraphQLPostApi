// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	domain "GraphQLTestCase/internal/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// UserUseCase is an autogenerated mock type for the UserUseCase type
type UserUseCase struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, entity
func (_m *UserUseCase) Create(ctx context.Context, entity domain.User) error {
	ret := _m.Called(ctx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *UserUseCase) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAll provides a mock function with given fields: ctx, limit, offset
func (_m *UserUseCase) GetAll(ctx context.Context, limit int, offset int) []*domain.User {
	ret := _m.Called(ctx, limit, offset)

	var r0 []*domain.User
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []*domain.User); ok {
		r0 = rf(ctx, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.User)
		}
	}

	return r0
}

// GetByID provides a mock function with given fields: ctx, id
func (_m *UserUseCase) GetByID(ctx context.Context, id uuid.UUID) *domain.User {
	ret := _m.Called(ctx, id)

	var r0 *domain.User
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *domain.User); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.User)
		}
	}

	return r0
}

// GetByIds provides a mock function with given fields: ctx, ids
func (_m *UserUseCase) GetByIds(ctx context.Context, ids []uuid.UUID) []*domain.User {
	ret := _m.Called(ctx, ids)

	var r0 []*domain.User
	if rf, ok := ret.Get(0).(func(context.Context, []uuid.UUID) []*domain.User); ok {
		r0 = rf(ctx, ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domain.User)
		}
	}

	return r0
}

// Update provides a mock function with given fields: ctx, entity
func (_m *UserUseCase) Update(ctx context.Context, entity domain.User) error {
	ret := _m.Called(ctx, entity)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.User) error); ok {
		r0 = rf(ctx, entity)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewUserUseCase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserUseCase creates a new instance of UserUseCase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserUseCase(t mockConstructorTestingTNewUserUseCase) *UserUseCase {
	mock := &UserUseCase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
